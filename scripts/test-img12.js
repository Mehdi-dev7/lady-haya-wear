#!/usr/bin/env node

/**
 * Script pour tester l'acc√®s √† img12.jpeg
 */

const fs = require("fs");
const path = require("path");

async function testImg12() {
	console.log("üîç Test d'acc√®s √† img12.jpeg...\n");

	const imgPath = path.join(__dirname, "../public/assets/grid/img12.jpeg");

	// Test 1: V√©rifier que le fichier existe localement
	console.log("1Ô∏è‚É£ Test local:");
	if (fs.existsSync(imgPath)) {
		const stats = fs.statSync(imgPath);
		console.log(`   ‚úÖ Fichier existe localement`);
		console.log(`   üìè Taille: ${(stats.size / 1024).toFixed(2)} KB`);
		console.log(`   üìÖ Modifi√©: ${stats.mtime.toLocaleString()}`);
	} else {
		console.log(`   ‚ùå Fichier n'existe pas localement`);
		return;
	}

	// Test 2: V√©rifier que le fichier est lisible
	console.log("\n2Ô∏è‚É£ Test de lecture:");
	try {
		const buffer = fs.readFileSync(imgPath);
		console.log(`   ‚úÖ Fichier lisible`);
		console.log(`   üìä Taille du buffer: ${buffer.length} bytes`);

		// V√©rifier que c'est bien une image JPEG
		if (buffer[0] === 0xff && buffer[1] === 0xd8) {
			console.log(`   ‚úÖ Format JPEG valide`);
		} else {
			console.log(
				`   ‚ö†Ô∏è  Format JPEG suspect (magic bytes: ${buffer[0].toString(16)}, ${buffer[1].toString(16)})`
			);
		}
	} catch (error) {
		console.log(`   ‚ùå Erreur de lecture: ${error.message}`);
	}

	// Test 3: V√©rifier les permissions
	console.log("\n3Ô∏è‚É£ Test des permissions:");
	try {
		fs.accessSync(imgPath, fs.constants.R_OK);
		console.log(`   ‚úÖ Lecture autoris√©e`);
	} catch (error) {
		console.log(`   ‚ùå Lecture non autoris√©e: ${error.message}`);
	}

	// Test 4: V√©rifier l'int√©grit√© du fichier
	console.log("\n4Ô∏è‚É£ Test d'int√©grit√©:");
	try {
		const buffer = fs.readFileSync(imgPath);
		const hash = require("crypto")
			.createHash("md5")
			.update(buffer)
			.digest("hex");
		console.log(`   üîê Hash MD5: ${hash}`);

		// V√©rifier que le fichier n'est pas corrompu
		if (buffer.length > 1000) {
			// Au moins 1KB
			console.log(`   ‚úÖ Fichier semble intact`);
		} else {
			console.log(`   ‚ö†Ô∏è  Fichier tr√®s petit, possiblement corrompu`);
		}
	} catch (error) {
		console.log(`   ‚ùå Erreur d'int√©grit√©: ${error.message}`);
	}

	console.log("\n" + "=".repeat(50));
	console.log("üìã R√âSUM√â:");
	console.log("=".repeat(50));
	console.log("Si tous les tests passent, le probl√®me vient probablement de :");
	console.log("1. L'image n'est pas upload√©e dans Sanity");
	console.log("2. L'image n'est pas assign√©e √† un produit");
	console.log("3. Probl√®me de permissions Sanity");
	console.log("4. Probl√®me de CDN Sanity");
	console.log("\nüí° Solutions :");
	console.log("1. Re-uploader l'image dans Sanity");
	console.log("2. V√©rifier l'assignation de l'image au produit");
	console.log("3. V√©rifier les permissions Sanity");
	console.log("4. Contacter le support Sanity si n√©cessaire");
}

// Ex√©cuter les tests
testImg12();
