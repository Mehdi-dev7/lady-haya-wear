// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === NEXT AUTH MODELS ===
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// === USER & PROFILE ===
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  newsletterSubscribed Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Profil
  profile       UserProfile?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
  favorites     Favorite[]
  addresses     Address[]
  resetToken    String?   // Token de reset password
  resetTokenExpiry DateTime? // Date d'expiration du token
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  civility    Civility?
  firstName   String?
  lastName    String?
  phone       String?
  birthDate   DateTime?
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType
  civility    Civility?
  firstName   String
  lastName    String
  company     String?
  street      String
  city        String
  zipCode     String
  country     String
  phone       String?
  isDefault   Boolean     @default(false)
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders   Order[] @relation("BillingAddress")
  shippingOrders  Order[] @relation("ShippingAddress")
}

// === PANIER ===
model CartItem {
  id          String  @id @default(cuid())
  userId      String
  productId   String  // ID du produit Sanity
  colorName   String?
  sizeName    String?
  quantity    Int     @default(1)
  price       Float   // Prix au moment de l'ajout
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId, colorName, sizeName])
}

// === FAVORIS ===
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String   // ID du produit Sanity
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
}

// === COMMANDES ===
model Order {
  id              String      @id @default(cuid())
  userId          String
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  
  // Informations client
  customerEmail   String      // Email du client
  customerName    String      // Nom du client
  customerPhone   String?     // Téléphone du client
  
  // Prix
  subtotal        Float
  shippingCost    Float       @default(0)
  taxAmount       Float       @default(0)
  total           Float
  
  // Code promo
  promoCodeId     String?
  promoDiscount   Float       @default(0)
  
  // Paiement
  paymentMethod   String?     // Méthode de paiement
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Adresses
  billingAddressId  String?
  shippingAddressId String?
  
  // Notes
  notes           String?     // Notes de commande
  
  // Suivi de livraison
  trackingNumber  String?     // Numéro de suivi du colis
  carrier         String?     // Transporteur (Colissimo, Chronopost, etc.)
  
  // Dates
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  promoCode       PromoCode?  @relation(fields: [promoCodeId], references: [id])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String  // ID du produit Sanity
  productName String  // Nom au moment de la commande
  colorName   String?
  sizeName    String?
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// === ADMINISTRATEURS ===
model Admin {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Mot de passe hashé
  name            String
  role            AdminRole @default(ADMIN)
  isActive        Boolean  @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



// === CODES PROMO ===
model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique // Code unique comme "NEWSLETTER20"
  type        PromoType
  value       Float    // Valeur de la réduction
  minAmount   Float?   // Montant minimum pour appliquer
  maxUses     Int?     // Nombre max d'utilisations
  usedCount   Int      @default(0) // Nombre d'utilisations actuelles
  validFrom   DateTime @default(now())
  validUntil  DateTime
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]  // Commandes qui ont utilisé ce code
}

// === NEWSLETTER ===
model NewsletterCampaign {
  id            String   @id @default(cuid())
  subject       String   // Sujet de la campagne
  content       String   @db.Text // Contenu de la newsletter
  recipientCount Int     // Nombre de destinataires
  sentCount     Int      @default(0) // Nombre d'emails envoyés avec succès
  failedCount   Int      @default(0) // Nombre d'échecs d'envoi
  status        CampaignStatus @default(DRAFT)
  createdAt     DateTime @default(now())
  sentAt        DateTime? // Date d'envoi
  updatedAt     DateTime @updatedAt
}

// === ENUMS ===
enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum Civility {
  MR
  MME
}

enum PromoType {
  PERCENTAGE    // Réduction en pourcentage
  FIXED         // Réduction fixe en euros
  FREE_SHIPPING // Livraison gratuite
}

enum AdminRole {
  SUPER_ADMIN   // Administrateur principal
  ADMIN         // Administrateur standard
  MANAGER       // Manager
}

enum PaymentStatus {
  PENDING       // En attente de paiement
  PAID          // Payé
  FAILED        // Échec du paiement
  REFUNDED      // Remboursé
  PARTIALLY_REFUNDED // Partiellement remboursé
}

enum CampaignStatus {
  DRAFT         // Brouillon
  SENDING       // En cours d'envoi
  SENT          // Envoyée
  FAILED        // Échec d'envoi
}
